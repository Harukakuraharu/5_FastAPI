services:
  backend:
    build: ./
    container_name: backend
    env_file:
      - .env
    restart: always
    command: gunicorn main:app -k uvicorn.workers.UvicornWorker --bind 0.0.0.0
    volumes:
      - ./app:/app
      - ./parser/models:/app/models
    ports:
      - 80:8000
  parser:
    build: 
      dockerfile: ./Dockerfile.parser
    container_name: parser
    env_file:
      - .env
    restart: on-failure
    command: python main.py
    volumes:
      - ./parser:/parser
    depends_on:
      db:
        condition: service_healthy
  redis:
    image: redis:alpine
    container_name: redis

  celery:
    build: ./
    container_name: celery
    env_file:
      - .env
    volumes:
      - ./app:/app
    command: celery -A core.celery_app worker -l INFO
    restart: always
  celery_beat:
    build: ./
    container_name: celery_beat
    volumes:
      - ./app:/app
    env_file:
      - .env
    command: celery -A core.celery_app beat -l INFO
    restart: always
  db:
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 3s
